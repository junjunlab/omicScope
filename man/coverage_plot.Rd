% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/visualization-supps.R
\name{coverage_plot}
\alias{coverage_plot}
\title{Generate Coverage Profile Plots with Gene Models}
\usage{
coverage_plot(
  bam_file = NULL,
  bw_file = NULL,
  sample_name = NULL,
  group_name = NULL,
  gtf_file = NULL,
  target_gene = NULL,
  target_region = NULL,
  sample_order = NULL,
  group_order = NULL,
  gene_order = NULL,
  region_order = NULL,
  merge_group = FALSE,
  add_range_label = FALSE,
  range_digit = 1,
  remove_labelY = FALSE,
  collapse_exon = FALSE,
  arrow_length = 1.2,
  arrow_linewidth = 0.3,
  arrow_col = "black",
  range_pos = c(0.9, 0.9),
  exon_col = "black",
  exon_linewidth = 3,
  add_backsqure = TRUE,
  add_gene_label = TRUE,
  gene_label_size = 1,
  highlight_region = NULL,
  highlight_col_aes = "seqnames",
  highlight_col = NULL,
  highlight_alpha = 0.2
)
}
\arguments{
\item{bam_file}{A character vector of paths to one or more BAM files.}

\item{bw_file}{A character vector of paths to one or more bigwig files.}

\item{sample_name}{A character vector providing sample names for each BAM/bigwig file.
If NULL, the BAM/bigwig filenames are used.}

\item{group_name}{A character vector assigning a group to each sample.
If NULL, the BAM filenames are used.}

\item{gtf_file}{Path to a GTF file or a \code{GRanges} object containing gene annotations.}

\item{target_gene}{A character vector of one or more target gene names (e.g., from the \code{gene_name}
attribute in the GTF) to visualize.}

\item{target_region}{A character vector specifying genomic regions in the format
"chr:start-end" (e.g., "chr1:1000000-2000000"). Defaults to NULL. Either \code{target_gene}
or \code{target_region} must be provided.}

\item{sample_order}{A character vector to specify the display order of samples in the facets.}

\item{group_order}{A character vector to specify the display order of groups in the facets.}

\item{gene_order}{A character vector to specify the display order of genes in the facets.}

\item{region_order}{A character vector to specify the display order of regions in the facets.
Defaults to NULL.}

\item{merge_group}{Logical. If \code{TRUE}, RPM values for samples within the same group are
averaged and displayed as a single group track. Defaults to \code{FALSE}.}

\item{add_range_label}{Logical. If \code{TRUE}, adds a text label indicating the Y-axis
range to each coverage panel. Defaults to \code{FALSE}.}

\item{range_digit}{Numeric. The number of decimal places to use for the range label.
Defaults to 1.}

\item{remove_labelY}{Logical. If \code{TRUE}, removes Y-axis tick labels and marks.
Defaults to \code{FALSE}.}

\item{collapse_exon}{Logical. If \code{TRUE}, all transcripts of a gene are collapsed
into a single, flattened gene model for display. Defaults to \code{FALSE}.}

\item{arrow_length}{Numeric. Controls the size of the arrowhead for the transcript
direction arrows. Defaults to 1.2.}

\item{arrow_linewidth}{Numeric. Controls the line width of the transcript direction
arrows. Defaults to 0.3.}

\item{arrow_col}{Character string. The color of the transcript direction arrows.
Defaults to "black".}

\item{range_pos}{A numeric vector of length 2 \code{c(x, y)} specifying the relative position
(from 0 to 1) of the range label within the panel. Defaults to \code{c(0.9, 0.9)}.}

\item{exon_col}{Character string. The color of the exon segments in the gene model.
Defaults to "black".}

\item{exon_linewidth}{Numeric. The line width of the exon segments. Defaults to 3.}

\item{add_backsqure}{Logical. If \code{TRUE}, adds a background box to gene labels when
\code{target_region} is used. Uses \code{geom_label()} instead of \code{geom_text()}. Defaults to \code{TRUE}.}

\item{add_gene_label}{Logical. If \code{TRUE}, adds gene name labels to the gene structure
track when using \code{target_region}. Defaults to \code{TRUE}.}

\item{gene_label_size}{Numeric. The size of the gene name labels. Defaults to 1.}

\item{highlight_region}{A data frame containing regions to be highlighted
on the plot. The object must include \code{start} and \code{end} columns. This allows for overlaying
colored bands to mark specific features (e.g., peaks, motifs, domains). Defaults to \code{NULL}.}

\item{highlight_col_aes}{A character string specifying the column in \code{highlight_region} data
to use for the \code{fill} aesthetic. This enables different regions to be colored based on a
categorical variable. Defaults to \code{"seqnames"}.}

\item{highlight_col}{A named character vector specifying the colors to use for the fill
scale of the highlighted regions. The names should correspond to the unique values in the
\code{highlight_col_aes} column. If \code{NULL} (default), the default ggplot2 color scale is used.}

\item{highlight_alpha}{Numeric. The transparency of the highlighted region fill, ranging from
0 (fully transparent) to 1 (fully opaque). Defaults to \code{0.2}.}
}
\value{
A \code{ggplot} object, which can be printed to display the plot or modified
further with additional ggplot2 layers.
}
\description{
This function calculates read coverage (in Reads Per Million, RPM) for specified
gene regions from BAM files and visualizes it alongside the corresponding gene/transcript
structures derived from a GTF file. It uses \code{ggh4x} for flexible faceting to
compare profiles across different samples/groups and genes.
}
\examples{
\dontrun{
# This example requires actual BAM and GTF files to run.
# The following shows the basic function call structure.

# Assume you have the following files:
my_bams <- c("path/to/sample1.bam", "path/to/sample2.bam")
my_gtf <- "path/to/genes.gtf"
target_genes <- c("Actb", "Nanog")

# Basic usage
p <- coverage_plot(
  bam_file = my_bams,
  sample_name = c("Sample1", "Sample2"),
  group_name = c("Control", "Treatment"),
  gtf_file = my_gtf,
  target_gene = target_genes
)
print(p)

# Customized plot with merged groups
p_merged <- coverage_plot(
  bam_file = c("path/to/ctrl_rep1.bam", "path/to/ctrl_rep2.bam"),
  sample_name = c("Control_rep1", "Control_rep2"),
  group_name = c("Control", "Control"),
  gtf_file = my_gtf,
  target_gene = target_genes,
  merge_group = TRUE,
  add_range_label = TRUE,
  collapse_exon = TRUE,
  arrow_col = "blue",
  exon_col = "darkblue"
)
print(p_merged)
}
}
