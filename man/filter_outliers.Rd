% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter-outliers.R
\name{filter_outliers}
\alias{filter_outliers}
\alias{filter_outliers,omicscope-method}
\title{Identify and Remove Outlier Samples Using Multi-dimensional PCA}
\usage{
filter_outliers(object, ...)

\S4method{filter_outliers}{omicscope}(object, dims_to_use = 1:3, p_value_threshold = 0.05)
}
\arguments{
\item{object}{An \code{omicscope} object on which \code{run_reduction} with \code{reduction = "pca"} has been run.}

\item{...}{Additional arguments (currently not used).}

\item{dims_to_use}{A numeric vector specifying which principal components to
use for calculating the distance. Defaults to \code{1:3} (i.e., PC1, PC2, and PC3).
Using more dimensions can capture outliers that are hidden in lower-dimensional projections.}

\item{p_value_threshold}{A numeric value (between 0 and 1) for the significance
level. Samples with a Mahalanobis distance corresponding to a p-value less
than this threshold will be flagged as outliers. A lower value makes the
filtering more stringent. Defaults to \code{0.05}.}
}
\value{
A new, filtered \code{omicscope} object with outlier samples removed.
If no outliers are found, the original object is returned unmodified.
\strong{Important:} The \verb{@reduction} slot is cleared in the returned object, requiring
re-running of \code{run_reduction()} to generate valid dimensionality reduction results.
}
\description{
This function identifies outlier samples based on their positions
in a multi-dimensional PCA space. It uses the Mahalanobis distance to find samples
that are statistically distant from the center of the data distribution across
the specified principal components.
}
\details{
The function operates as follows:
\enumerate{
\item It requires that PCA has already been run on the \code{omicscope} object via \code{run_reduction(..., reduction = "pca")}.
\item It calculates the Mahalanobis distance for each sample in the space defined by the selected principal components. This distance metric accounts for the covariance between the PCs.
\item It determines a distance threshold based on a p-value from the Chi-squared distribution. The degrees of freedom for the test are equal to the number of PCs used (\code{length(dims_to_use)}).
\item Samples with a distance exceeding this threshold are considered outliers.
\item A message is printed identifying the outliers, and a new \code{omicscope} object is returned with these samples removed.
}

This function is designed to be used as a data cleaning step. A typical workflow is:
run PCA → use \code{filter_outliers} → run PCA again on the cleaned data → visualize the improved sample clustering.

\strong{Key advantages of multi-dimensional filtering:}
\itemize{
\item Can detect outliers hidden in higher-dimensional space that appear normal in 2D
\item More statistically rigorous than 2D-only approaches
\item Automatically adjusts statistical test for the number of dimensions used
}
}
\examples{
\dontrun{
# === Complete real-world workflow example ===
# This example shows the typical analysis pipeline with visualization

# Assume 'obj' is your preprocessed omicscope object with normalized counts

# Step 1: Run initial PCA for outlier detection
obj <- run_reduction(object = obj)

# Step 2: Create before-filtering visualization
p1 <- dim_plot(obj)

# Step 3: Apply multi-dimensional outlier filtering
# Using 3D space (PC1, PC2, PC3) with 5\% significance threshold
obj <- filter_outliers(obj,
                       dims_to_use = 1:3,
                       p_value_threshold = 0.05)

# Step 4: Re-run PCA on the cleaned dataset
obj <- run_reduction(object = obj)

# Step 5: Create after-filtering visualization
p2 <- dim_plot(obj)

# Step 6: Compare before and after plots side-by-side
library(patchwork)
comparison_plot <- p1 + p2
print(comparison_plot)

# The left plot shows the original data with potential outliers
# The right plot shows the cleaned data with improved sample clustering
}


}
