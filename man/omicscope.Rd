% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class.R, R/constructor.R
\docType{class}
\name{omicscope}
\alias{omicscope}
\alias{.omicscope}
\title{The omicscope class for comprehensive RNA-seq analysis}
\usage{
omicscope(
  gtfAnno = NULL,
  bamFile = NULL,
  counts = NULL,
  featureCountOutput = FALSE,
  metadata = NULL
)
}
\arguments{
\item{gtfAnno}{Character string specifying the path to GTF/GFF annotation file,
or NULL. If provided, gene annotations will be parsed and stored in the object}

\item{bamFile}{Character vector of BAM file paths for read counting.
Used when starting analysis from aligned reads rather than count matrices}

\item{counts}{Character string specifying the path to a count matrix file,
or NULL. The file should contain gene expression counts with genes as rows
and samples as columns}

\item{featureCountOutput}{Logical value indicating whether the count file is
output from featureCounts. If TRUE, the first 7 columns (annotation columns)
will be skipped. Default is FALSE}

\item{metadata}{Data.frame containing sample metadata. Must include columns
'sample' and 'group'. Optional 'sample_name' column for custom sample names.
If NULL, basic metadata will be inferred from file names}
}
\value{
An omicscope object containing:
\itemize{
\item Expression data in assays slot (if counts provided)
\item Gene annotations in rowData and gtfAnno slots
\item Sample metadata in colData slot
\item Empty slots for downstream analysis results
}
}
\description{
The omicscope class extends SummarizedExperiment to provide a unified framework
for RNA-seq data analysis workflows, including read counting, normalization,
differential expression, dimensionality reduction, and functional enrichment analysis.

This function creates an omicscope object from various input types including
count matrices, BAM files, and GTF annotations. It serves as the main constructor
for initializing omicscope objects for comprehensive RNA-seq analysis workflows.
}
\details{
The function supports three main usage scenarios:

\strong{1. From count matrix:}
\itemize{
\item Provide \code{counts} file path and optional \code{metadata}
\item Count matrix is loaded and converted to sparse matrix format
\item Gene annotations are matched to count matrix if GTF is provided
}

\strong{2. From BAM files:}
\itemize{
\item Provide \code{bamFile} paths and \code{metadata}
\item Creates object structure for subsequent read counting with \code{count_data()}
\item Requires GTF annotation for gene definitions
}

\strong{3. Empty object:}
\itemize{
\item Call with no arguments to create minimal object
\item Useful for step-by-step object construction
}

\strong{File Format Requirements:}
\itemize{
\item \strong{Count files}: Tab-separated, genes as rows, samples as columns,
first column as gene IDs
\item \strong{featureCounts output}: Standard format with annotation columns 1-7
\item \strong{GTF files}: Standard GTF/GFF format with gene_id, gene_name,
and gene_biotype attributes
\item \strong{BAM files}: Aligned reads in standard BAM format
}

\strong{Metadata Requirements:}
\itemize{
\item \code{sample}: Must match count matrix column names or BAM file paths
\item \code{group}: Experimental groups for differential analysis
\item \code{sample_name}: Optional custom names for samples
}

The function automatically:
\itemize{
\item Converts count matrices to sparse format for memory efficiency
\item Matches gene annotations to expression data
\item Validates sample-metadata correspondence
\item Sets up proper row and column names
}
}
\section{Slots}{

\describe{
\item{\code{gtfAnno}}{A \code{\link[GenomicRanges]{GRanges}} object containing gene
annotations parsed from GTF file, including gene coordinates, biotypes, and metadata}

\item{\code{gtfPath}}{Character vector specifying the file path to the GTF annotation file
used for gene annotation and read counting}

\item{\code{normalizedData}}{List containing normalized expression matrices with different
methods. Names typically include "TPM", "FPKM", "CPM", "vst", "rlog", etc.}

\item{\code{reduction}}{List storing dimensionality reduction results from methods like
PCA, t-SNE, UMAP. Each element contains coordinates and method parameters}

\item{\code{diffExpData}}{List organized by analysis method (deseq2, edger, limma),
containing differential expression results for different contrasts}

\item{\code{enrichmentData}}{List storing functional enrichment analysis results from
various databases (GO, KEGG, Reactome, etc.)}

\item{\code{activityData}}{An \code{activitydata} object containing pathway activity
analysis results and related metadata}
}}

\examples{
\dontrun{
# Example 1: Create from featureCounts output
metadata <- data.frame(
  sample = c("sample1.bam", "sample2.bam", "sample3.bam", "sample4.bam"),
  group = rep(c("control", "treatment"), each = 2),
  sample_name = c("ctrl1", "ctrl2", "treat1", "treat2")
)

os <- omicscope(
  gtfAnno = "path/to/annotation.gtf",
  counts = "path/to/featureCounts_output.txt",
  featureCountOutput = TRUE,
  metadata = metadata
)

# Example 2: Create from custom count matrix
os <- omicscope(
  gtfAnno = "annotation.gtf",
  counts = "expression_matrix.txt",
  featureCountOutput = FALSE,
  metadata = metadata
)

# Example 3: Create from BAM files for counting
bam_files <- c("sample1.sorted.bam", "sample2.sorted.bam",
               "sample3.sorted.bam", "sample4.sorted.bam")

metadata <- data.frame(
  sample = bam_files,
  group = rep(c("day0", "day10"), each = 2),
  sample_name = c("day0-rep1", "day0-rep2", "day10-rep1", "day10-rep2")
)

os <- omicscope(
  gtfAnno = "annotation.gtf",
  bamFile = bam_files,
  metadata = metadata
)

# Then perform read counting
os <- count_data(os)

# Example 4: Empty object for step-by-step construction
os <- omicscope()

# Basic inspection
print(os)
dim(os)
colData(os)
rowData(os)
}



}
\author{
Jun Zhang
}
